# Generated by Django 5.0.1 on 2024-05-17 18:27

from datetime import datetime

from core.models import (
    Asset,
    AssetData,
    DateRange,
    Log,
    LogActivity,
    LogPlay,
    LogStorage,
    Lti,
    Notification,
    PermObjectToUser,
    Question,
    UserExtraAttempts,
    Widget,
    WidgetInstance,
    WidgetQset,
)
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0007_alter_log_log_type_alter_logactivity_user_and_more"),
    ]

    def translate_timestamps(apps, schema_editor):
        import logging

        logger = logging.getLogger("django")

        def timestamp_to_datetime(ts):
            if not ts:
                return None
            from django.utils.timezone import make_aware

            return make_aware(datetime.fromtimestamp(ts))

        logger.info("Converting Asset timestamps to datetimes")
        for asset in Asset.objects.all():
            asset.created_at_dt = timestamp_to_datetime(asset.created_at)
            asset.deleted_at_dt = timestamp_to_datetime(asset.deleted_at)
            asset.save()

        logger.info("Converting AssetData timestamps to datetimes")
        for ad in AssetData.objects.all():
            ad.created_at_dt = timestamp_to_datetime(ad.created_at)
            ad.save()

        logger.info("Converting DateRange timestamps to datetimes")
        for dr in DateRange.objects.all():
            dr.start_at_dt = timestamp_to_datetime(dr.start_at)
            dr.end_at_dt = timestamp_to_datetime(dr.end_at)
            dr.save()

        logger.info("Converting Log timestamps to datetimes")
        for log in Log.objects.all():
            log.created_at_dt = timestamp_to_datetime(log.created_at)
            log.save()

        logger.info("Converting LogActivity timestamps to datetimes")
        for la in LogActivity.objects.all():
            la.created_at_dt = timestamp_to_datetime(la.created_at)
            la.save()

        logger.info("Converting LogPlay timestamps to datetimes")
        for lp in LogPlay.objects.all():
            lp.created_at_dt = timestamp_to_datetime(lp.created_at)
            lp.save()

        logger.info("Converting LogStorage timestamps to datetimes")
        for ls in LogStorage.objects.all():
            ls.created_at_dt = timestamp_to_datetime(ls.created_at)
            ls.save()

        logger.info("Converting Lti timestamps to datetimes")
        for lti in Lti.objects.all():
            lti.created_at_dt = timestamp_to_datetime(lti.created_at)
            lti.updated_at_dt = timestamp_to_datetime(lti.updated_at)
            lti.save()

        logger.info("Converting Notification timestamps to datetimes")
        for notification in Notification.objects.all():
            notification.created_at_dt = timestamp_to_datetime(notification.created_at)
            notification.updated_at_dt = timestamp_to_datetime(notification.updated_at)
            notification.save()

        logger.info("Converting PermObjectToUser timestamps to datetimes")
        for potu in PermObjectToUser.objects.all():
            potu.expires_at_dt = timestamp_to_datetime(potu.expires_at)
            potu.save()

        logger.info("Converting UserExtraAttempts timestamps to datetimes")
        for uea in UserExtraAttempts.objects.all():
            uea.created_at_dt = timestamp_to_datetime(uea.created_at)
            uea.save()

        logger.info("Converting Question timestamps to datetimes")
        for question in Question.objects.all():
            question.created_at_dt = timestamp_to_datetime(question.created_at)
            question.save()

        logger.info("Converting Widget timestamps to datetimes")
        for widget in Widget.objects.all():
            widget.created_at_dt = timestamp_to_datetime(widget.created_at)
            widget.save()

        logger.info("Converting WidgetInstance timestamps to datetimes")
        for wi in WidgetInstance.objects.all():
            wi.created_at_dt = timestamp_to_datetime(wi.created_at)
            wi.save()

        logger.info("Converting WidgetQset timestamps to datetimes")
        for wq in WidgetQset.objects.all():
            wq.created_at_dt = timestamp_to_datetime(wq.created_at)
            wq.save()

    def translate_datetimes(apps, schema_editor):
        import logging

        logger = logging.getLogger("django")

        def datetime_to_timestamp(dt):
            from datetime import datetime

            return datetime.timestamp(dt)

        logger.info("Converting Asset datetimes to timestamps")
        for asset in Asset.objects.all():
            asset.created_at = datetime_to_timestamp(asset.created_at_dt)
            asset.deleted_at = datetime_to_timestamp(asset.deleted_at_dt)
            asset.save()

        logger.info("Converting AssetData datetimes to timestamps")
        for ad in AssetData.objects.all():
            ad.created_at_dt = datetime_to_timestamp(ad.created_at)
            ad.save()

        logger.info("Converting DateRange datetimes to timestamps")
        for dr in DateRange.objects.all():
            dr.start_at = datetime_to_timestamp(dr.start_at_dt)
            dr.end_at = datetime_to_timestamp(dr.end_at_dt)
            dr.save()

        logger.info("Converting Log datetimes to timestamps")
        for log in Log.objects.all():
            log.created_at = datetime_to_timestamp(log.created_at_dt)
            log.save()

        logger.info("Converting LogActivity datetimes to timestamps")
        for la in LogActivity.objects.all():
            la.created_at = datetime_to_timestamp(la.created_at_dt)
            la.save()

        logger.info("Converting LogPlay datetimes to timestamps")
        for lp in LogPlay.objects.all():
            lp.created_at = datetime_to_timestamp(lp.created_at_dt)
            lp.save()

        logger.info("Converting LogStorage datetimes to timestamps")
        for ls in LogStorage.objects.all():
            ls.created_at = datetime_to_timestamp(ls.created_at_dt)
            ls.save()

        logger.info("Converting Lti datetimes to timestamps")
        for lti in Lti.objects.all():
            lti.created_at = datetime_to_timestamp(lti.created_at_dt)
            lti.updated_at = datetime_to_timestamp(lti.updated_at_dt)
            lti.save()

        logger.info("Converting Notification datetimes to timestamps")
        for notification in Notification.objects.all():
            notification.created_at = datetime_to_timestamp(notification.created_at_dt)
            notification.updated_at = datetime_to_timestamp(notification.updated_at_dt)
            notification.save()

        logger.info("Converting PermObjectToUser datetimes to timestamps")
        for potu in PermObjectToUser.objects.all():
            potu.expires_at = datetime_to_timestamp(potu.expires_at_dt)
            potu.save()

        logger.info("Converting UserExtraAttempts datetimes to timestamps")
        for uea in UserExtraAttempts.objects.all():
            uea.created_at = datetime_to_timestamp(uea.created_at_dt)
            uea.save()

        logger.info("Converting Question datetimes to timestamps")
        for question in Question.objects.all():
            question.created_at = datetime_to_timestamp(question.created_at_dt)
            question.save()

        logger.info("Converting Widget datetimes to timestamps")
        for widget in Widget.objects.all():
            widget.created_at = datetime_to_timestamp(widget.created_at_dt)
            widget.save()

        logger.info("Converting WidgetInstance datetimes to timestamps")
        for wi in WidgetInstance.objects.all():
            wi.created_at = datetime_to_timestamp(wi.created_at_dt)
            wi.save()

        logger.info("Converting WidgetQset datetimes to timestamps")
        for wq in WidgetQset.objects.all():
            wq.created_at = datetime_to_timestamp(wq.created_at_dt)
            wq.save()

    operations = [
        migrations.AlterField(
            model_name="notification",
            name="updated_at_dt",
            field=models.DateTimeField(default=datetime.now, null=True),
        ),
        migrations.AlterField(
            model_name="permobjecttouser",
            name="expires_at_dt",
            field=models.DateTimeField(default=datetime.now, null=True),
        ),
        migrations.RunPython(translate_timestamps, translate_datetimes),
    ]
